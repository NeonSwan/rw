#!/usr/bin/env node

// A “pathological inflating” transform as described in Node’s stream.Transform
// implementation, where every byte of input is interpreted as an integer
// between 0 and 255, and results in that many bytes of output.
//
// [1] https://github.com/joyent/node/blob/v0.10.29/lib/_stream_transform.js#L52-L63

var rw = require("../");

var writer = rw.fileWriter("/dev/stdout"),
    reader = rw.fileReader(process.argv[2] || "/dev/stdin"),
    bridge = rw.bridge(),
    zero = "0".charCodeAt(0);

transform(reader, bridge);
pipe(bridge, writer);

function transform(reader, writer, callback) {
  reader.fill(function pipe(error) {
    if (error) return callback(error);
    var input;

    while ((input = reader.read(1)) != null) {
      var output = new Buffer(input[0]);
      output.fill(zero);
      if (!writer.write(output)) return writer.drain(pipe);
    }

    if (reader.ended) return writer.end(callback);
    reader.fill(pipe);
  });
}

function pipe(reader, writer, callback) {
  reader.fill(function pipe(error) {
    if (error) return callback(error);
    var data = reader.read();
    if (data != null && !writer.write(data)) return writer.drain(pipe);
    if (reader.ended) return writer.end(callback);
    reader.fill(pipe);
  });
}

